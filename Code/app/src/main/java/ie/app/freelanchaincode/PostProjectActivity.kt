package ie.app.freelanchaincode

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.chip.Chip
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import ie.app.freelanchaincode.databinding.ActivityCreatProjectBinding
import ie.app.freelanchaincode.models.ProjectModel
import java.util.UUID

class PostProjectActivity : AppCompatActivity() {
    private lateinit var binding: ActivityCreatProjectBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCreatProjectBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.submitProject.setOnClickListener {
            val name = binding.nameEdit.text.toString()
            val description = binding.DescriptionEdit.text.toString()
            val kindOfPay = binding.KindofPayEdit.text.toString()

            val budget = binding.budgetEdit.text.toString()
            val skillRequire = getSkillListFromChips()
            val user_id = FirebaseAuth.getInstance().currentUser?.uid.toString()
            val time = Timestamp.now()
            if (name.isNotBlank() && description.isNotBlank() && kindOfPay.isNotBlank() && budget.isNotBlank() && skillRequire.isNotEmpty()) {
                onSubmitButtonClick(
                    name, description, skillRequire, kindOfPay, budget.toInt(), user_id, time
                )
            }
        }

        binding.addChipButton.setOnClickListener {
            if (binding.chipText.text.toString().isNotBlank()) {
                addChipsFromText(binding.chipText.text.toString())
            }
            binding.chipText.setText("")
        }
    }

    private fun addChipsFromText(text: String) {
        val chip = Chip(this)
        chip.text = binding.chipText.text.toString()
        chip.isCloseIconVisible = true
        chip.setOnCloseIconClickListener { binding.chipGroup.removeView(chip) }
        binding.chipGroup.addView(chip)
    }

    private fun onSubmitButtonClick(
        name: String,
        description: String,
        skillRequire: List<String>,
        kindOfPay: String,
        budget: Int,
        user_id: String,
        time: Timestamp
    ) {
        // Create a new instance of ProjectModel with the data entered by the user
        val id = UUID.randomUUID().toString()

        FirebaseFirestore.getInstance().collection("User")
            .document(FirebaseAuth.getInstance().currentUser?.uid.toString()).get()
            .addOnSuccessListener { document ->
                if (document != null) {
                    val userName = document.getString("name")

                    val newProject = ProjectModel(
                        id = id, // This will be autogenerated by Firestore
                        owner = userName, name = name, // Get name from Firestore
                        description = description, // Get description from EditText
                        budget = budget, // Get budget from EditText or wherever it's entered
                        kindOfPay = kindOfPay, // Get kind of pay from EditText or wherever it's entered
                        skillRequire = skillRequire,// Get skills from wherever they are entered
                        user_id = user_id, time = time
                    )

                    val projectDocId = "${newProject.user_id}"
                    // Add the new project to Firestore
                    FirebaseFirestore.getInstance().collection("Project").document(projectDocId)
                        .collection("item").document(id).set(newProject)
                        .addOnSuccessListener { documentReference ->
                            Toast.makeText(
                                this@PostProjectActivity,
                                "Success create new project",
                                Toast.LENGTH_SHORT
                            ).show()
                            // Handle success, e.g., show a success message to the user
                        }.addOnFailureListener { e ->
                            Toast.makeText(
                                this@PostProjectActivity,
                                "Create new project failed",
                                Toast.LENGTH_SHORT
                            ).show()
                            // Handle failure, e.g., show an error message to the user
                        }
                }
            }.addOnFailureListener {
                Toast.makeText(
                    this@PostProjectActivity,
                    "Failed to get user data",
                    Toast.LENGTH_SHORT
                ).show()
            }
        val resultIntent = Intent()
        setResult(RESULT_OK, resultIntent)
        finish()
    }

    private fun getSkillListFromChips(): List<String> {
        val chipGroup = binding.chipGroup
        val skillList = mutableListOf<String>()

        // Iterate over each chip and add its text to the list
        for (i in 0 until chipGroup.childCount) {
            val chip = chipGroup.getChildAt(i) as Chip
            skillList.add(chip.text.toString())
        }

        return skillList
    }
}