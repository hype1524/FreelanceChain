package ie.app.freelanchaincode

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.chip.Chip
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import ie.app.freelanchaincode.databinding.ActivityCreatProjectBinding
import ie.app.freelanchaincode.models.ProjectModel
import java.util.zip.Inflater

class PostProjectActivity : AppCompatActivity() {
    private lateinit var binding: ActivityCreatProjectBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCreatProjectBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.submitProject.setOnClickListener {
            val name = binding.nameEdit.text.toString()
            val description = binding.DescriptionEdit.text.toString()
            val kindOfPay = binding.KindofPayEdit.text.toString()

            val budget = binding.budgetEdit.text.toString()
            val skillRequire = getSkillListFromChips()
            if (name.isNotBlank() && description.isNotBlank() && kindOfPay.isNotBlank() && budget.isNotBlank() && skillRequire.isNotEmpty()) {
                onSubmitButtonClick(name, description, skillRequire, kindOfPay, budget.toInt())
            }
        }

        binding.addChipButton.setOnClickListener {
            if (binding.chipText.text.toString().isNotBlank()) {
                addChipsFromText(binding.chipText.text.toString())
            }
            binding.chipText.setText("");
        }
    }

    private  fun addChipsFromText(text: String) {
        val chip = Chip(this);
        chip.setText(binding.chipText.text.toString())
        chip.isCloseIconVisible = true
        chip.setOnCloseIconClickListener{binding.chipGroup.removeView(chip)}
        binding.chipGroup.addView(chip)
    }

    private fun onSubmitButtonClick(name: String, description: String, skillRequire: List<String>, kindOfPay: String, budget: Int) {
        // Create a new instance of ProjectModel with the data entered by the user
        val newProject = ProjectModel(
            id = null, // This will be autogenerated by Firestore
            owner = FirebaseAuth.getInstance().currentUser?.uid.toString(),
            name = name, // Get name from EditText or wherever it's entered
            description = description, // Get description from EditText
            budget = budget, // Get budget from EditText or wherever it's entered
            kindOfPay = kindOfPay, // Get kind of pay from EditText or wherever it's entered
            skillRequire = skillRequire// Get skills from wherever they are entered
        )

        val projectDocId = "${newProject.owner}"
        // Add the new project to Firestore
        FirebaseFirestore.getInstance().collection("Project")
            .document(projectDocId).set(newProject)
            .addOnSuccessListener { documentReference ->
                Toast.makeText(this@PostProjectActivity, "Success create new project", Toast.LENGTH_SHORT).show()
                // Handle success, e.g., show a success message to the user
            }
            .addOnFailureListener { e ->
                Toast.makeText(this@PostProjectActivity, "Create new project failed", Toast.LENGTH_SHORT).show()
                // Handle failure, e.g., show an error message to the user
            }
    }

    private fun getSkillListFromChips(): List<String> {
        val chipGroup = binding.chipGroup
        val skillList = mutableListOf<String>()

        // Iterate over each chip and add its text to the list
        for (i in 0 until chipGroup.childCount) {
            val chip = chipGroup.getChildAt(i) as Chip
            skillList.add(chip.text.toString())
        }

        return skillList
    }
}